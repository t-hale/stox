// Code generated by goa v3.11.3, DO NOT EDIT.
//
// stox HTTP client CLI support package
//
// Command:
// $ goa gen github.com/t-hale/stox/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	stox "github.com/t-hale/stox/gen/stox"
	goa "goa.design/goa/v3/pkg"
)

// BuildPlanPayload builds the payload for the stox plan endpoint from CLI
// flags.
func BuildPlanPayload(stoxPlanBody string) (*stox.VestingPlanRequest, error) {
	var err error
	var body PlanRequestBody
	{
		err = json.Unmarshal([]byte(stoxPlanBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"GrantDate\": \"1982-02-19\",\n      \"Symbol\": \"pu2\",\n      \"UnitsGranted\": 3172591699515641958,\n      \"VestDate\": \"1987-04-16\",\n      \"VestFrequency\": \"monthly\"\n   }'")
		}
		if utf8.RuneCountInString(body.Symbol) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.Symbol", body.Symbol, utf8.RuneCountInString(body.Symbol), 1, true))
		}
		if body.UnitsGranted < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.UnitsGranted", body.UnitsGranted, 1, true))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.GrantDate", body.GrantDate, goa.FormatDate))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.VestDate", body.VestDate, goa.FormatDate))
		if !(body.VestFrequency == "monthly" || body.VestFrequency == "quarterly" || body.VestFrequency == "yearly") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.VestFrequency", body.VestFrequency, []any{"monthly", "quarterly", "yearly"}))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &stox.VestingPlanRequest{
		Symbol:        body.Symbol,
		UnitsGranted:  body.UnitsGranted,
		GrantDate:     stox.Date(body.GrantDate),
		VestDate:      stox.Date(body.VestDate),
		VestFrequency: stox.VestFrequency(body.VestFrequency),
	}

	return v, nil
}
