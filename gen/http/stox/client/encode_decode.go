// Code generated by goa v3.11.3, DO NOT EDIT.
//
// stox HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/t-hale/stox/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	stox "github.com/t-hale/stox/gen/stox"
	goahttp "goa.design/goa/v3/http"
)

// BuildPlanRequest instantiates a HTTP request object with method and path set
// to call the "stox" service "plan" endpoint
func (c *Client) BuildPlanRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PlanStoxPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("stox", "plan", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePlanRequest returns an encoder for requests sent to the stox plan
// server.
func EncodePlanRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*stox.VestingPlanRequest)
		if !ok {
			return goahttp.ErrInvalidType("stox", "plan", "*stox.VestingPlanRequest", v)
		}
		body := NewPlanRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("stox", "plan", err)
		}
		return nil
	}
}

// DecodePlanResponse returns a decoder for responses returned by the stox plan
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodePlanResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body PlanResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("stox", "plan", err)
			}
			err = ValidatePlanResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("stox", "plan", err)
			}
			res := NewPlanVestingPlanResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("stox", "plan", resp.StatusCode, string(body))
		}
	}
}

// unmarshalVestEventResponseBodyToStoxVestEvent builds a value of type
// *stox.VestEvent from a value of type *VestEventResponseBody.
func unmarshalVestEventResponseBodyToStoxVestEvent(v *VestEventResponseBody) *stox.VestEvent {
	if v == nil {
		return nil
	}
	res := &stox.VestEvent{
		UnitsGranted:       v.UnitsGranted,
		UnitsRemaining:     v.UnitsRemaining,
		TotalUnitsGranted:  v.TotalUnitsGranted,
		AmountGranted:      v.AmountGranted,
		TotalAmountGranted: v.TotalAmountGranted,
	}
	if v.Date != nil {
		date := stox.Date(*v.Date)
		res.Date = &date
	}

	return res
}
