// Code generated by goa v3.11.3, DO NOT EDIT.
//
// stox HTTP client types
//
// Command:
// $ goa gen github.com/t-hale/stox/design

package client

import (
	stox "github.com/t-hale/stox/gen/stox"
	goa "goa.design/goa/v3/pkg"
)

// PlanRequestBody is the type of the "stox" service "plan" endpoint HTTP
// request body.
type PlanRequestBody struct {
	// stock symbol to retrieve plan for
	Symbol string `form:"Symbol" json:"Symbol" xml:"Symbol"`
	// number of stock units granted
	UnitsGranted int64 `form:"UnitsGranted" json:"UnitsGranted" xml:"UnitsGranted"`
	// initial grant date of equities
	GrantDate string `form:"GrantDate" json:"GrantDate" xml:"GrantDate"`
	// date the equities vest completely
	VestDate string `form:"VestDate" json:"VestDate" xml:"VestDate"`
	// frequency of vesting schedule (monthly, quarterly, yearly)
	VestFrequency string `form:"VestFrequency" json:"VestFrequency" xml:"VestFrequency"`
}

// PlanResponseBody is the type of the "stox" service "plan" endpoint HTTP
// response body.
type PlanResponseBody struct {
	Symbol   *string                  `form:"Symbol,omitempty" json:"Symbol,omitempty" xml:"Symbol,omitempty"`
	Price    *float64                 `form:"Price,omitempty" json:"Price,omitempty" xml:"Price,omitempty"`
	VestPlan []*VestEventResponseBody `form:"VestPlan,omitempty" json:"VestPlan,omitempty" xml:"VestPlan,omitempty"`
}

// VestEventResponseBody is used to define fields on response body types.
type VestEventResponseBody struct {
	UnitsGranted       *int64   `form:"UnitsGranted,omitempty" json:"UnitsGranted,omitempty" xml:"UnitsGranted,omitempty"`
	UnitsRemaining     *int64   `form:"UnitsRemaining,omitempty" json:"UnitsRemaining,omitempty" xml:"UnitsRemaining,omitempty"`
	TotalUnitsGranted  *int64   `form:"TotalUnitsGranted,omitempty" json:"TotalUnitsGranted,omitempty" xml:"TotalUnitsGranted,omitempty"`
	Date               *string  `form:"Date,omitempty" json:"Date,omitempty" xml:"Date,omitempty"`
	AmountGranted      *float64 `form:"AmountGranted,omitempty" json:"AmountGranted,omitempty" xml:"AmountGranted,omitempty"`
	TotalAmountGranted *float64 `form:"TotalAmountGranted,omitempty" json:"TotalAmountGranted,omitempty" xml:"TotalAmountGranted,omitempty"`
}

// NewPlanRequestBody builds the HTTP request body from the payload of the
// "plan" endpoint of the "stox" service.
func NewPlanRequestBody(p *stox.VestingPlanRequest) *PlanRequestBody {
	body := &PlanRequestBody{
		Symbol:        p.Symbol,
		UnitsGranted:  p.UnitsGranted,
		GrantDate:     string(p.GrantDate),
		VestDate:      string(p.VestDate),
		VestFrequency: string(p.VestFrequency),
	}
	return body
}

// NewPlanVestingPlanResponseOK builds a "stox" service "plan" endpoint result
// from a HTTP "OK" response.
func NewPlanVestingPlanResponseOK(body *PlanResponseBody) *stox.VestingPlanResponse {
	v := &stox.VestingPlanResponse{
		Symbol: body.Symbol,
		Price:  body.Price,
	}
	if body.VestPlan != nil {
		v.VestPlan = make([]*stox.VestEvent, len(body.VestPlan))
		for i, val := range body.VestPlan {
			v.VestPlan[i] = unmarshalVestEventResponseBodyToStoxVestEvent(val)
		}
	}

	return v
}

// ValidatePlanResponseBody runs the validations defined on PlanResponseBody
func ValidatePlanResponseBody(body *PlanResponseBody) (err error) {
	for _, e := range body.VestPlan {
		if e != nil {
			if err2 := ValidateVestEventResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateVestEventResponseBody runs the validations defined on
// VestEventResponseBody
func ValidateVestEventResponseBody(body *VestEventResponseBody) (err error) {
	if body.Date != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.Date", *body.Date, goa.FormatDate))
	}
	return
}
