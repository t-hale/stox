// Code generated by goa v3.11.3, DO NOT EDIT.
//
// stox HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/t-hale/stox/design

package server

import (
	"context"
	"io"
	"net/http"

	stox "github.com/t-hale/stox/gen/stox"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodePlanResponse returns an encoder for responses returned by the stox
// plan endpoint.
func EncodePlanResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*stox.VestingPlanResponse)
		enc := encoder(ctx, w)
		body := NewPlanResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePlanRequest returns a decoder for requests sent to the stox plan
// endpoint.
func DecodePlanRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body PlanRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePlanRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewPlanVestingPlanRequest(&body)

		return payload, nil
	}
}

// marshalStoxVestEventToVestEventResponseBody builds a value of type
// *VestEventResponseBody from a value of type *stox.VestEvent.
func marshalStoxVestEventToVestEventResponseBody(v *stox.VestEvent) *VestEventResponseBody {
	if v == nil {
		return nil
	}
	res := &VestEventResponseBody{
		UnitsGranted:       v.UnitsGranted,
		UnitsRemaining:     v.UnitsRemaining,
		TotalUnitsGranted:  v.TotalUnitsGranted,
		AmountGranted:      v.AmountGranted,
		TotalAmountGranted: v.TotalAmountGranted,
	}
	if v.Date != nil {
		date := string(*v.Date)
		res.Date = &date
	}

	return res
}
